/**
 * Copyright Notice 
 * 
 * COPYRIGHTÂ© 2015 Build 82. All rights reserved. No part of this software
 * and constituent code may be reproduced in any form, including video recording, 
 * photocopying, downloading, broadcasting or transmission electronically, without 
 * prior written consent of Build 82. Copyright protection includes output
 * generated by this software as displayed in print or in digital form, such as 
 * icons, interfaces, and the like.
 * 
 * Content Warranty 
 * 
 * The information in this document is subject to change without notice. THIS 
 * DOCUMENT IS PROVIDED "AS IS" AND BUILD 82 MAKES NO WARRANTY, EXPRESS, 
 * IMPLIED, OR STATUTORY, INCLUDING BUT NOT LIMITED TO ALL WARRANTIES OF 
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT. 
 * Build 82 shall not be liable for errors contained herein or for 
 * incidental or consequential damages in connection with the furnishing, 
 * performance or use of this material.
 */

define(['build82/utility/xhr',
		'dojo/io-query'
		],
    function(xhr, ioQuery) {
		var config = {
			base: {
				authorize: 'https://www.dropbox.com/1/oauth2/authorize',
				upload: 'https://content.dropboxapi.com/1/files_put/auto/'
			},
			redirectUrl: '/'
		},
		
		data = {
			redirectUrl: null,
			appKey: null,
			accessToken: null
		},
				
		/**
		 * retrieve Dropbox redirect url for application (default if not set)
		 * @returns string Dropbox redirect url
		 */
		getRedirect = function() {
			return data.redirectURL || location.origin + location.pathname.replace(/\/[^/]*$/, '') + config.redirectUrl;
		},
		
		/**
		 * create a Blob from a dataUrl
		 * @param dataUrl string a "data:image/png:base64,AFF347f...." style data url
		 * @returns Blob binary data blob
		 */
		createBlob = function(dataUrl) {
			var blob_bin = atob(dataUrl.split(',')[1]);
			delete dataUrl;
			var data_ary = new Uint8Array(blob_bin.length);
			for(var i = 0; i < blob_bin.length; i++) {
				data_ary[i] = blob_bin.charCodeAt(i);
			}
			delete blob_bin;
			return new Blob([data_ary], {type: 'image/png'});
		};
				
        console.log('Dropbox ready');

        return {
			SetAppKey: function(key) {
				data.appKey = key;
			},
			
			SetRedirect: function(url) {
				data.redirectURL = url;
			},
			
			SetAccessToken: function(token) {
				data.accessToken = token;
			},
			
			/**
			 * initiate Dropbox user authorization
			 * @param url_bool bool if true, only return url (do not nativate to url)
			 * @returns string application specific Dropbox user authentication url
			 */
			Authorize: function(url_bool) {
				var dropboxUrl = config.base.authorize + '?' + ioQuery.objectToQuery({
					client_id: data.appKey,
					response_type: 'token',
					redirect_uri: getRedirect()
				});
		
				if(!url_bool) {
					location.assign(dropboxUrl);
				}
				
				return dropboxUrl;
			},
			
			Upload: function(dataUrl, filename, success, fail, progress) {
				if(!data.accessToken) {
					return
				}
				
				// send
				return xhr(config.base.upload + filename, {
					method: 'PUT',
					query: {
						overwrite: false,
					},
					data: createBlob(dataUrl),
					headers: {
						'Authorization' : 'Bearer ' + data.accessToken
					},
					handleAs: 'json'
				}).then(success, fail, progress);
			}
		};
    } 
);