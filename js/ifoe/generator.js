/**
 * Copyright Notice 
 * 
 * COPYRIGHTÂ© 2015 Build 82. All rights reserved. No part of this software
 * and constituent code may be reproduced in any form, including video recording, 
 * photocopying, downloading, broadcasting or transmission electronically, without 
 * prior written consent of Build 82. Copyright protection includes output
 * generated by this software as displayed in print or in digital form, such as 
 * icons, interfaces, and the like.
 * 
 * Content Warranty 
 * 
 * The information in this document is subject to change without notice. THIS 
 * DOCUMENT IS PROVIDED "AS IS" AND BUILD 82 MAKES NO WARRANTY, EXPRESS, 
 * IMPLIED, OR STATUTORY, INCLUDING BUT NOT LIMITED TO ALL WARRANTIES OF 
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT. 
 * Build 82 shall not be liable for errors contained herein or for 
 * incidental or consequential damages in connection with the furnishing, 
 * performance or use of this material.
 */

define(['dojo/dom',
        'dojo/on',
		'build82/reimg'
        ], 
    function(dom, on, reimg) {
		var config = {
			canvas_id: 'image_result',
			staticImage_url: 'images/ifoe_static.svg',
			control: {
				select_id: 'control_image_selector',
				opacity_id: 'control_image_opacity',
				blendmode_id: 'control_image_blend_mode',
				save_id: 'control_image_save'
			}
		},
		data = {
			staticImage: null,
			userImage: null,
			changed: false
		},
		
		/**
		 * loads the 'overlay' image (flag, banner, etc.)
		 * @returns void
		 */
		loadStaticImage = function() {
			data.staticImage = new Image();
			data.staticImage.addEventListener("load", function() {
				data.changed = true;
				generate();
				data.changed = false;
				inputDisable(false);
			}, false);
			
			inputDisable(true);
			data.staticImage.src = config.staticImage_url;
		},
		
		/**
		 * loads the user selected image
		 * @param event evt input:chane event
		 * @returns void
		 */
		loadUserImage = function(param_evt) {
			for(var i = 0; i < param_evt.srcElement.files.length; i++) {
				var file = param_evt.srcElement.files[i];

				data.userImage = new Image();
				var reader = new FileReader();
				reader.onloadend = function() {
					data.userImage.src = reader.result;
					setTimeout(function(){
						generate();
						inputDisable(false);
					}, 1);
				}
				
				inputDisable(true);
				reader.readAsDataURL(file);
			}
		},
			
		/**
		 * disable inputs while loading/processing (prevents browser crash)
		 * @param param_bool bool true to disable inputs, false to enable
		 * @returns void
		 */
		inputDisable = function(param_disabled_bool) {
			dom.byId(config.control.select_id).disabled = param_disabled_bool;
			dom.byId(config.control.blendmode_id).disabled = param_disabled_bool;
			dom.byId(config.control.opacity_id).disabled = param_disabled_bool;
			dom.byId(config.control.save_id).disabled = param_disabled_bool;
			
			if(param_disabled_bool) {
				document.body.style.cursor = "wait";
			}
			else {
				document.body.style.cursor = "default";
			}
		},
		
		/**
		 * composites the images together in the configured canvas element (control via html inputs)
		 * @returns void
		 */
		generate = function() {
			// google analytics event
			ga('send', {
				hitType: 'event',
				eventCategory: 'Processing',
				eventAction: 'generate',
				eventLabel: 'blendmode:'+dom.byId(config.control.blendmode_id).value+' opacity:'+dom.byId(config.control.opacity_id).value
			});
			
			// default suggestion
			if(!data.changed) {
				dom.byId(config.control.blendmode_id).value = "hard-light";
				dom.byId(config.control.opacity_id).value = "75";
				data.changed = true;
			}
			
			var canvas = document.getElementById(config.canvas_id);
			var ctx = canvas.getContext("2d");
			ctx.mozImageSmoothingEnabled = false;
			ctx.msImageSmoothingEnabled = false;
			ctx.imageSmoothingEnabled = false;
			ctx.globalCompositeOperation = "source-over";
			ctx.globalAlpha = 1;
			
			// clear canvas (white background)
			ctx.fillStyle = "#FFFFFF";
			ctx.fillRect(0, 0, canvas.width, canvas.height);
			
			if(data.userImage) {
				centerImage(ctx, data.userImage);
			}
			
			if(data.staticImage) {
				ctx.globalAlpha = dom.byId(config.control.opacity_id).value / 100;
				ctx.globalCompositeOperation = dom.byId(config.control.blendmode_id).value;
				centerImage(ctx, data.staticImage);
			}
		},
		
		/**
		 * center an image on a canvas (via its drawing context)
		 * @param param_context 2d canvas graphics context to compute center
		 * @param param_image image data to draw centered onto context
		 * @returns void
		 */
		centerImage = function(param_context, param_image) {
			var scaled = {width:null, height:null};
			if(param_context.canvas.height >= param_context.canvas.width) {
				// tall canvas
				scaled.width = param_context.canvas.width;
				scaled.height = param_image.height * scaled.width/param_image.width;
			}
			else {
				// wide canvas
				scaled.height = param_context.canvas.height;
				scaled.width = param_image.width * scaled.height/param_image.height;
			}
			
			var offset = {
				x: param_context.canvas.width/2 - scaled.width/2,
				y: param_context.canvas.height/2 - scaled.height/2
			};
			
			param_context.drawImage(param_image, 0, 0, param_image.width, param_image.height, offset.x, offset.y, scaled.width, scaled.height);
		},
				
		/**
		 * record change & initiate image generation
		 * @params void
		 */
		handleParamChange = function() {
			data.changed = true;
			generate();
		},
		
		/**
		 * open image select dialog when image is clicked/touched
		 * @returns void
		 */
		handleImageClick = function() {
			// google analytics event
			ga('send', {
				hitType: 'event',
				eventCategory: 'Interaction',
				eventAction: 'click/touch',
				eventLabel: 'image'
			});
			
			dom.byId(config.control.select_id).click();
		},
		
		/**
		 * save a png of the configured canvas element
		 * @returns void
		 */		
		handleSave = function() {
			// google analytics event
			ga('send', {
				hitType: 'event',
				eventCategory: 'Processing',
				eventAction: 'save',
				eventLabel: 'blendmode:'+dom.byId(config.control.blendmode_id).value+' opacity:'+dom.byId(config.control.opacity_id).value
			});
			
			reimg.fromCanvas(dom.byId(config.canvas_id)).downloadPng();
		};
			
		return {
			Init: function() {
				loadStaticImage();
				
				on(dom.byId(config.control.select_id), 'change', loadUserImage);
				on(dom.byId(config.control.blendmode_id), 'change', handleParamChange);
				on(dom.byId(config.control.opacity_id), 'change', handleParamChange);
				on(dom.byId(config.control.save_id), 'click', handleSave);
				on(dom.byId(config.canvas_id), 'click', handleImageClick);
				
				console.log('iFoE Generator Init Complete.');
			}
		};
	}
);